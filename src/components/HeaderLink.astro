---
import type { HTMLAttributes } from "astro/types";

type Type = "primary" | "secondary" | "tertiary";
const {
  href = "",
  text = "",
  style = "primary",
  class: className,
  ...props
} = Astro.props;

interface Props extends HTMLAttributes<"a"> {
  text: string;
  href: string;
  style: Type;
}

const types: Record<Type, string> = {
  primary: "header-btn-primary",
  secondary: "header-btn-secondary",
  tertiary: "header-btn-tertiary",
};

const getType = (style: Type) => {
  return types[style] || "";
};

const baseUrl = import.meta.env.BASE_URL.endsWith("/")
  ? import.meta.env.BASE_URL
  : import.meta.env.BASE_URL + "/";
const fullHref = href.startsWith("/") ? baseUrl.slice(0, -1) + href : href;
const pathname = Astro.url.pathname.replace(import.meta.env.BASE_URL, "");
const subpath = pathname.match(/[^\/]+/g);
const isActive = href === pathname || href === "/" + (subpath?.[0] || "");
---

<a
  href={fullHref}
  class:list={[
    className,
    `rounded-md border-1 border-transparent hover:border-black inline-block px-5 py-2 ${getType(style)}`,
    { active: isActive },
  ]}
  {...props}
>
  {text}
</a>

<style>
  a {
    display: inline-block;
    text-decoration: none;
    /* Reserve space for the full shadow to prevent layout shift */
    margin-right: 10px;
    margin-bottom: 10px;
    box-shadow: 0px 0px transparent;
    transition:
      box-shadow 0.15s ease-in-out,
      border-color 0.15s ease-in-out;
  }
  a.active {
    font-weight: bolder;
  }

  .header-btn-primary:hover {
    box-shadow: 10px 10px #96c7f2;
  }

  .header-btn-secondary:hover {
    box-shadow: 10px 10px #adf296;
  }

  .header-btn-tertiary:hover {
    box-shadow: 10px 10px #f396e5;
  }
</style>
